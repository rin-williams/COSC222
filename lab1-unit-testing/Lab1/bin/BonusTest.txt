# Bonus test question (open with markdown for better view)

### **1st test**

```java
@Test
void testSortIntArrayEquals() {
    assertTrue(Arrays.equals(ASorted,B));
}
```

- `Arrays.equals()` is a valid way of comparing if two arrays are the same.This test passes because `ASorted` and `B` has the same elements, which is `{ -1, 0, 1, 3, 4, 5, 9 }`.

---

### **2nd test**

```java
@Test
void testSortIntArrayDeepEquals() {
     assertTrue(Objects.deepEquals(ASorted, B));
}
```

- This test passes and is valid because `Objects.deepEquals()` will deeply check check `B` array and see if every single element in it is equal to `ASorted` array.

---

### **3rd test**

```java
@Test
void testSortIntAssertArrayEquals() {
    assertArrayEquals(ASorted, B);
}
```

- This test is valid because the method `assertArrayEquals()` is made to compare arrays.

---

### **4th test**

```java
@Test
void testSortIntEquals() {
    assertFalse(B.equals(ASorted));
}
```

- This is not a valid test because `B` is an instance of `A`, and this compares if the reference of `B` is equal to `ASorted` which has its own reference, thus, it will return false, passing the test.

---

### **5th test**

```
@Test
void testSortIntAssertEquals() {
    assertNotEquals(ASorted, B);
}
```

- This test is invalid because it is just comparing the reference to each other, and since `ASorted` has its own reference and `B` is pointing to the reference of `A`, then this test will return false because they are not the same reference this is almost the same as the previous test.

---

### **6th test**

```java
@Test
void testSortIntAssertIterableEquals() {
    List<Integer> AS = Arrays.stream(ASorted).boxed().toList();
    List<Integer> BS = Arrays.stream(B).boxed().toList();
    assertIterableEquals(AS, BS);
}
```

- This test is valid because `assertIterableEquals()` iterates two list in order and compares the elements inside of it, so if they are identical, the test will pass, and this is what happened here, since `AS` contains `ASorted` but as a list, it will then compare to `BS` which contains the same elements as `B` but as a list.

---

### **7th test**

```java
@Test
void testSortIntAssertDeepEquals() {
    // convert to Object[] to use deepEquals
    Integer[] ASortedo = new Integer[ASorted.length];
    for (int i = 0; i < ASorted.length; i++)
        ASortedo[i] = ASorted[i];
    Integer[] Bo = new Integer[B.length];
    for (int i = 0; i < B.length; i++)
        Bo[i] = B[i];
    assertTrue(Arrays.deepEquals(ASortedo, Bo));
}
```

- This test is valid, and will pass if `ASorted` and `B` length is equal, we can already assume that both of them are sorted, but we might not know if one of the elements is longer than the other, and that is why this test case passed because both `ASorted` and `B` are of the same length.